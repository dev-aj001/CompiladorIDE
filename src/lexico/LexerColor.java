// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexico/LexerColor.flex

import compilerTools.TextColor;
import java.awt.Color;


@SuppressWarnings("fallthrough")
class LexerColor {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\1\7\2\0\1\10\1\0\2\11\1\12"+
    "\1\0\1\11\1\13\1\0\1\14\1\15\11\16\1\0"+
    "\1\11\2\0\1\17\2\0\14\20\1\21\15\20\4\0"+
    "\1\20\1\0\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\20\1\34\1\35\1\36"+
    "\1\37\1\40\1\20\1\41\1\42\1\43\1\44\4\20"+
    "\1\45\1\11\1\10\1\11\7\0\1\3\73\0\1\20"+
    "\7\0\1\20\3\0\1\20\3\0\1\20\1\0\1\20"+
    "\6\0\1\20\1\0\1\20\4\0\1\20\7\0\1\20"+
    "\3\0\1\20\3\0\1\20\1\0\1\20\6\0\1\20"+
    "\1\0\1\20\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\3\1\2\0\1\2\1\3\2\0\2\4\17\1"+
    "\2\5\1\0\1\5\1\6\3\0\1\7\1\5\1\4"+
    "\21\1\1\10\2\1\1\0\1\3\2\0\2\7\11\1"+
    "\1\11\12\1\2\0\1\7\2\1\1\12\1\13\14\1"+
    "\1\10\1\1\1\14\1\0\2\1\1\15\7\1\1\16"+
    "\1\1\1\0\1\17\7\1\1\20\4\1\1\21\1\1"+
    "\1\22\11\1\1\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\46\0\114\0\162\0\230\0\276\0\46"+
    "\0\46\0\344\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8"+
    "\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8"+
    "\0\u031e\0\u0344\0\u036a\0\u0390\0\114\0\u03b6\0\u03dc\0\u03dc"+
    "\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6"+
    "\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616"+
    "\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4\0\u06fa\0\u0720\0\u0746"+
    "\0\u076c\0\u0792\0\u07b8\0\u07de\0\114\0\u0804\0\u082a\0\114"+
    "\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a"+
    "\0\u0980\0\u09a6\0\u04e6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64"+
    "\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0804"+
    "\0\u0b94\0\u0bba\0\u04e6\0\u04e6\0\u0be0\0\u0c06\0\u0c2c\0\u0c52"+
    "\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82"+
    "\0\u04e6\0\u0da8\0\u04e6\0\u0dce\0\u0df4\0\u0e1a\0\u04e6\0\u0e40"+
    "\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u04e6\0\u0f4a"+
    "\0\u0f70\0\u04e6\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054"+
    "\0\u107a\0\114\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138\0\u115e"+
    "\0\u04e6\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268"+
    "\0\u128e\0\u12b4\0\u04e6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\2"+
    "\2\16\1\17\1\20\1\21\1\16\1\22\1\23\1\16"+
    "\1\24\1\25\2\16\1\26\1\27\1\16\1\30\1\31"+
    "\1\32\1\33\1\16\1\34\1\0\2\35\1\0\1\35"+
    "\1\36\110\0\1\4\43\0\1\37\1\40\1\35\1\37"+
    "\1\40\1\36\1\41\37\37\1\0\2\35\1\0\1\35"+
    "\1\36\7\0\2\42\1\0\26\42\1\0\2\35\1\0"+
    "\1\35\1\36\5\0\1\43\33\0\2\35\1\0\1\35"+
    "\1\36\4\0\1\44\1\0\1\45\32\0\2\35\1\0"+
    "\1\35\1\36\7\0\2\46\1\0\26\46\1\0\2\35"+
    "\1\0\1\35\1\36\7\0\2\47\1\0\26\46\1\0"+
    "\2\35\1\0\1\35\1\36\7\0\2\50\1\0\26\50"+
    "\1\0\2\35\1\0\1\35\1\36\7\0\2\50\1\0"+
    "\14\50\1\51\5\50\1\52\1\50\1\53\1\50\1\0"+
    "\2\35\1\0\1\35\1\36\7\0\2\50\1\0\17\50"+
    "\1\54\6\50\1\0\2\35\1\0\1\35\1\36\7\0"+
    "\2\50\1\0\2\50\1\55\23\50\1\0\2\35\1\0"+
    "\1\35\1\36\7\0\2\50\1\0\22\50\1\56\3\50"+
    "\1\0\2\35\1\0\1\35\1\36\7\0\2\50\1\0"+
    "\2\50\1\57\3\50\1\60\17\50\1\0\2\35\1\0"+
    "\1\35\1\36\7\0\2\50\1\0\17\50\1\61\6\50"+
    "\1\0\2\35\1\0\1\35\1\36\7\0\2\50\1\0"+
    "\16\50\1\62\7\50\1\0\2\35\1\0\1\35\1\36"+
    "\7\0\2\50\1\0\6\50\1\63\3\50\1\64\13\50"+
    "\1\0\2\35\1\0\1\35\1\36\7\0\2\50\1\0"+
    "\24\50\1\65\1\50\1\0\2\35\1\0\1\35\1\36"+
    "\7\0\2\50\1\0\17\50\1\66\6\50\1\0\2\35"+
    "\1\0\1\35\1\36\7\0\2\50\1\0\6\50\1\67"+
    "\3\50\1\70\13\50\1\0\2\35\1\0\1\35\1\36"+
    "\7\0\2\50\1\0\12\50\1\71\13\50\1\0\2\35"+
    "\1\0\1\35\1\36\7\0\2\50\1\0\6\50\1\72"+
    "\17\50\1\0\2\35\1\0\1\35\1\36\7\0\2\50"+
    "\1\0\17\50\1\73\6\50\2\0\1\35\43\0\2\37"+
    "\1\0\2\37\1\0\1\41\37\37\15\0\2\74\1\0"+
    "\26\74\17\0\1\75\26\0\12\76\1\77\33\76\2\45"+
    "\1\100\2\45\1\101\40\45\15\0\2\46\1\0\26\46"+
    "\15\0\2\47\1\0\26\46\15\0\2\50\1\0\26\50"+
    "\15\0\2\50\1\0\6\50\1\102\17\50\15\0\2\50"+
    "\1\0\20\50\1\103\5\50\15\0\2\50\1\0\23\50"+
    "\1\104\2\50\15\0\2\50\1\0\17\50\1\105\6\50"+
    "\15\0\2\50\1\0\5\50\1\106\20\50\15\0\2\50"+
    "\1\0\23\50\1\107\2\50\15\0\2\50\1\0\14\50"+
    "\1\110\11\50\15\0\2\50\1\0\4\50\1\111\21\50"+
    "\15\0\2\50\1\0\21\50\1\112\4\50\15\0\2\50"+
    "\1\0\4\50\1\113\16\50\1\114\2\50\15\0\2\50"+
    "\1\0\16\50\1\115\7\50\15\0\2\50\1\0\6\50"+
    "\1\116\17\50\15\0\2\50\1\0\15\50\1\117\10\50"+
    "\15\0\2\50\1\0\23\50\1\120\2\50\15\0\2\50"+
    "\1\0\20\50\1\121\5\50\15\0\2\50\1\0\6\50"+
    "\1\122\17\50\15\0\2\50\1\0\16\50\1\123\7\50"+
    "\15\0\2\50\1\0\15\50\1\124\10\50\15\0\2\50"+
    "\1\0\16\50\1\125\7\50\15\0\2\126\1\0\26\126"+
    "\12\76\1\127\45\76\1\127\1\76\1\130\31\76\2\0"+
    "\1\100\60\0\2\50\1\0\21\50\1\131\4\50\15\0"+
    "\2\50\1\0\6\50\1\132\17\50\15\0\2\50\1\0"+
    "\17\50\1\133\6\50\15\0\2\50\1\0\14\50\1\134"+
    "\11\50\15\0\2\50\1\0\6\50\1\135\17\50\15\0"+
    "\2\50\1\0\2\50\1\136\23\50\15\0\2\50\1\0"+
    "\14\50\1\137\11\50\15\0\2\50\1\0\11\50\1\140"+
    "\14\50\15\0\2\50\1\0\2\50\1\141\23\50\15\0"+
    "\2\50\1\0\6\50\1\142\17\50\15\0\2\50\1\0"+
    "\22\50\1\143\3\50\15\0\2\50\1\0\16\50\1\144"+
    "\7\50\15\0\2\50\1\0\6\50\1\145\17\50\15\0"+
    "\2\50\1\0\6\50\1\146\17\50\15\0\2\50\1\0"+
    "\6\50\1\147\17\50\15\0\2\50\1\0\10\50\1\150"+
    "\15\50\15\0\2\50\1\0\17\50\1\151\6\50\15\0"+
    "\2\50\1\0\20\50\1\152\5\50\15\0\2\50\1\0"+
    "\2\50\1\153\23\50\15\0\2\154\1\0\26\154\12\76"+
    "\1\127\1\76\1\100\31\76\15\0\2\50\1\0\23\50"+
    "\1\155\2\50\15\0\2\50\1\0\21\50\1\156\4\50"+
    "\15\0\2\50\1\0\16\50\1\140\7\50\15\0\2\50"+
    "\1\0\5\50\1\150\20\50\15\0\2\50\1\0\2\50"+
    "\1\157\23\50\15\0\2\50\1\0\2\50\1\134\23\50"+
    "\15\0\2\50\1\0\21\50\1\160\4\50\15\0\2\50"+
    "\1\0\16\50\1\161\7\50\15\0\2\50\1\0\2\50"+
    "\1\162\23\50\15\0\2\50\1\0\23\50\1\163\2\50"+
    "\15\0\2\50\1\0\21\50\1\164\4\50\15\0\2\50"+
    "\1\0\16\50\1\165\7\50\15\0\2\50\1\0\23\50"+
    "\1\166\2\50\15\0\2\50\1\0\17\50\1\167\6\50"+
    "\15\0\2\50\1\0\6\50\1\170\17\50\15\0\2\171"+
    "\1\0\26\171\15\0\2\50\1\0\2\50\1\172\23\50"+
    "\15\0\2\50\1\0\22\50\1\173\3\50\15\0\2\50"+
    "\1\0\12\50\1\150\13\50\15\0\2\50\1\0\23\50"+
    "\1\174\2\50\15\0\2\50\1\0\13\50\1\175\12\50"+
    "\15\0\2\50\1\0\21\50\1\176\4\50\15\0\2\50"+
    "\1\0\17\50\1\134\6\50\15\0\2\50\1\0\4\50"+
    "\1\177\21\50\15\0\2\50\1\0\12\50\1\200\13\50"+
    "\15\0\2\50\1\0\21\50\1\201\4\50\15\0\2\202"+
    "\1\0\26\202\15\0\2\50\1\0\17\50\1\203\6\50"+
    "\15\0\2\50\1\0\2\50\1\204\23\50\15\0\2\50"+
    "\1\0\6\50\1\172\17\50\15\0\2\50\1\0\2\50"+
    "\1\205\23\50\15\0\2\50\1\0\12\50\1\206\13\50"+
    "\15\0\2\50\1\0\21\50\1\207\4\50\15\0\2\50"+
    "\1\0\2\50\1\210\23\50\15\0\2\50\1\0\21\50"+
    "\1\167\4\50\15\0\2\50\1\0\21\50\1\211\4\50"+
    "\15\0\2\50\1\0\22\50\1\211\3\50\15\0\2\50"+
    "\1\0\2\50\1\167\23\50\15\0\2\50\1\0\1\50"+
    "\1\212\24\50\15\0\2\50\1\0\23\50\1\213\2\50"+
    "\15\0\2\50\1\0\12\50\1\214\13\50\15\0\2\50"+
    "\1\0\24\50\1\215\1\50\15\0\2\50\1\0\6\50"+
    "\1\216\17\50\15\0\2\50\1\0\21\50\1\206\4\50"+
    "\15\0\2\50\1\0\16\50\1\217\7\50\15\0\2\50"+
    "\1\0\23\50\1\220\2\50\15\0\2\50\1\0\21\50"+
    "\1\221\4\50\15\0\2\50\1\0\2\50\1\222\23\50"+
    "\15\0\2\50\1\0\22\50\1\223\3\50";

  private static int [] zzUnpacktrans() {
    int [] result = new int[4826];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\1\1\2\0\2\1\2\0\21\1"+
    "\1\11\1\1\1\0\2\1\3\0\27\1\1\0\1\11"+
    "\2\0\1\11\25\1\2\0\24\1\1\0\14\1\1\0"+
    "\10\1\1\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private TextColor textColor(long start, int size, Color color){
        return new TextColor((int) start, size, color);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerColor(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public TextColor yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Ignorar*/
            }
          // fall through
          case 19: break;
          case 2:
            { return textColor(yychar, yylength(), new Color(46, 125, 50));
            }
          // fall through
          case 20: break;
          case 3:
            { return textColor(yychar, yylength(), new Color(169, 155, 179));
            }
          // fall through
          case 21: break;
          case 4:
            { return textColor(yychar, yylength(), new Color(35, 120, 147));
            }
          // fall through
          case 22: break;
          case 5:
            { /* Ignorar */
            }
          // fall through
          case 23: break;
          case 6:
            { return textColor(yychar, yylength(), new Color(46, 220, 50));
            }
          // fall through
          case 24: break;
          case 7:
            { return textColor(yychar, yylength(), new Color(146, 146, 146));
            }
          // fall through
          case 25: break;
          case 8:
            { return textColor(yychar, yylength(), new Color(48, 63, 159));
            }
          // fall through
          case 26: break;
          case 9:
            { return textColor(yychar, yylength(), new Color(239, 108, 0));
            }
          // fall through
          case 27: break;
          case 10:
            { return textColor(yychar, yylength(), new Color(212, 129, 6));
            }
          // fall through
          case 28: break;
          case 11:
            { return textColor(yychar, yylength(), new Color(148, 58, 173));
            }
          // fall through
          case 29: break;
          case 12:
            { return textColor(yychar, yylength(), new Color(180, 29, 250));
            }
          // fall through
          case 30: break;
          case 13:
            { return textColor(yychar, yylength(), new Color(220, 41, 41));
            }
          // fall through
          case 31: break;
          case 14:
            { return textColor(yychar, yylength(), new Color(17, 94, 153));
            }
          // fall through
          case 32: break;
          case 15:
            { return textColor(yychar, yylength(), new Color(150, 0, 80));
            }
          // fall through
          case 33: break;
          case 16:
            { return textColor(yychar, yylength(), new Color(224, 195, 12));
            }
          // fall through
          case 34: break;
          case 17:
            { return textColor(yychar, yylength(), new Color(121, 107, 255));
            }
          // fall through
          case 35: break;
          case 18:
            { return textColor(yychar, yylength(), new Color(255, 64, 129));
            }
          // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
